import { useCallback } from 'react';
import { usePermissions } from '@/hooks/usePermissions';
import { useChartPermissions, ChartType } from '@/hooks/useChartPermissions';

// Mapeamento de se√ß√µes para seus respectivos tipos de gr√°ficos
const SECTION_CHART_MAPPING = {
  kpis: [
    'kpi_total_investido',
    'kpi_receita', 
    'kpi_ticket_medio',
    'kpi_total_pedidos'
  ] as ChartType[],
  creatives: [
    'creative_performance_chart',
    'creative_sales_chart'
  ] as ChartType[],
  sales: [
    'sales_summary_cards',
    'sales_chart',
    'country_sales_chart',
    'state_sales_chart'
  ] as ChartType[],
  subscriptions: [
    'subscription_renewals_chart',
    'subscription_status_chart',
    'new_subscribers_chart'
  ] as ChartType[],
  affiliates: [
    'affiliate_chart'
  ] as ChartType[]
};

export const useHierarchicalPermissions = () => {
  const { canAccessPage, loading: permissionsLoading, ...permissionMethods } = usePermissions();
  const { hasChartPermission, loading: chartLoading, ...chartMethods } = useChartPermissions();

  const loading = permissionsLoading || chartLoading;

  /**
   * Verifica se uma se√ß√£o deve ser vis√≠vel com base nas permiss√µes hier√°rquicas:
   * - Se todas as permiss√µes individuais est√£o desabilitadas, a se√ß√£o √© ocultada
   * - Se pelo menos uma permiss√£o individual est√° habilitada, a se√ß√£o √© mostrada
   * - Se n√£o h√° gr√°ficos mapeados para a se√ß√£o, usa a permiss√£o de p√°gina original
   */
  const canAccessSection = useCallback((section: keyof typeof SECTION_CHART_MAPPING): boolean => {
    const chartTypes = SECTION_CHART_MAPPING[section];
    
    if (!chartTypes || chartTypes.length === 0) {
      // Se n√£o h√° gr√°ficos mapeados para esta se√ß√£o, usa a permiss√£o de p√°gina original
      return canAccessPage(section);
    }

    // Verifica se pelo menos um gr√°fico da se√ß√£o tem permiss√£o habilitada
    const hasAnyChartPermission = chartTypes.some(chartType => hasChartPermission(chartType));
    
    console.log(`üîó Hierarchical permission check for section "${section}":`, {
      chartTypes,
      hasAnyChartPermission,
      individualPermissions: chartTypes.map(chartType => ({
        chartType,
        permission: hasChartPermission(chartType)
      }))
    });

    return hasAnyChartPermission;
  }, [canAccessPage, hasChartPermission]);

  /**
   * Verifica permiss√£o para p√°ginas que n√£o s√£o se√ß√µes com gr√°ficos
   */
  const canAccessNonSectionPage = useCallback((page: string): boolean => {
    return canAccessPage(page);
  }, [canAccessPage]);

  /**
   * Verifica permiss√£o individual de gr√°fico (mant√©m funcionalidade original)
   */
  const canAccessChart = useCallback((chartType: ChartType): boolean => {
    return hasChartPermission(chartType);
  }, [hasChartPermission]);

  return {
    // Permiss√µes hier√°rquicas para se√ß√µes
    canAccessSection,
    
    // Permiss√µes para p√°ginas n√£o-se√ß√£o
    canAccessNonSectionPage,
    
    // Permiss√µes individuais de gr√°ficos
    canAccessChart,
    
    // Estado de carregamento
    loading,
    
    // M√©todos originais dos hooks
    ...permissionMethods,
    ...chartMethods
  };
};